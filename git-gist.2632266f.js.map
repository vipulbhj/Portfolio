{"version":3,"sources":["git-gist.js"],"names":["tagName","template","document","createElement","innerHTML","GitGist","HTMLElement","gistData","container","undefined","getGistDataFromGistId","bind","gistId","gistUrl","fetch","then","r","json","body","files","listItems","Object","keys","content","replace","split","map","item","join","render","catch","e","console","log","shadowRoot","attachShadow","mode","appendChild","cloneNode","getElementById","name","oldVal","newVal","getAttribute","value","setAttribute","register","customElements","define","window","WebComponents","waitFor"],"mappings":"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","file":"git-gist.2632266f.js","sourceRoot":"../src","sourcesContent":["const tagName = 'git-gist';\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n  <style>\n    :host {\n    }\n    \n    /* width */\n    ::-webkit-scrollbar {\n      width: 1px;\n      height: 0px;\n    }\n    \n    /* Track */\n    ::-webkit-scrollbar-track {\n      background: #f1f1f1; \n    }\n    \n    /* Handle */\n    ::-webkit-scrollbar-thumb {\n      background: yellowgreen; \n    }\n    \n    /* Handle on hover */\n    ::-webkit-scrollbar-thumb:hover {\n      background: #f3f3f3; \n    }\n    \n    #container {\n      padding: 20px 20px 20px 0px;\n      font-size: 1.2em;\n      font-family: monospace;\n      border: 1px solid black;\n      max-height: 400px;\n      overflow: auto;\n      scrollbar-width: thin;\n      background-color: #171717;\n      color: #f3f3f3;\n    }\n\n    ol {\n      margin: 0;\n    }\n    \n    li {\n      font-size: 1em;\n      padding-left: 20px;\n    }\n    \n    code::selection {\n      background-color: #ffff00;\n      color: tomato;\n    }\n    \n    code::-moz-selection {\n      background-color: #ffff00;\n      color: tomato;\n    }\n  </style>\n  \n  <div id=\"container\">\n      If you don't provide me the gist id, I can't load shit\n  </div>\n`;\n\nclass GitGist extends HTMLElement {\n    constructor() {\n        super();\n        this.gistData = '';\n        this.container = undefined;\n        this.getGistDataFromGistId = this.getGistDataFromGistId.bind(this);\n    }\n\n    getGistDataFromGistId(gistId) {\n        const gistUrl = `https://api.github.com/gists/${gistId}`;\n        fetch(gistUrl)\n            .then(r => r.json())\n            .then(body => {\n                // For more information read the api docs for gists.\n                // Or hit me up at @vipulbhj(Twitter), happy to help :)\n                let files = body.files;\n                let fileNameAsKeys = Object.keys(files)[0];\n                const allData = files[fileNameAsKeys].content.replace(/[ ]/gm, \"&nbsp\").split('\\n');\n                const listItems = allData.map(item => {\n                    return `<li><code>${item}</code></li>`;\n                });\n                this.gistData = `<ol>${listItems.join('')}</ol>`;\n                this.render();\n            })\n            .catch(e => console.log('Something went wrong. Error:- ', e));\n    }\n\n    render() {\n        if (this.gistData && this.container) {\n            this.container.innerHTML = this.gistData;\n        }\n    }\n\n    get gistId() {\n        return this.getAttribute('gist-id');\n    }\n\n    set gistId(value) {\n        this.setAttribute('gist-id', value);\n    }\n\n    static get observedAttributes() {\n        return ['gist-id'];\n    }\n\n    connectedCallback() {\n        if (!this.shadowRoot) {\n            this.attachShadow({ mode: 'open' });\n            this.shadowRoot.appendChild(template.content.cloneNode(true));\n            this.container = this.shadowRoot.getElementById('container');\n            if(this.gistId) {\n                this.getGistDataFromGistId(this.gistId);\n                this.gistData = 'Loading...';\n                this.render(); \n            }\n        }\n    }\n\n    attributeChangedCallback(name, oldVal, newVal) {\n        if (name === 'gist-id' && oldVal !== newVal) {\n            if (newVal) {\n                this.gistId = newVal;\n                this.getGistDataFromGistId(this.gistId);\n                this.gistData = 'Loading...';\n                this.render();\n            } else {\n                this.gistId = undefined;\n                this.gistData = '<code style=\"color: yellowgreen\">gist-id</code> attribute is required';\n                this.render();\n            }                \n        }\n    }\n}\n\nconst register = () => customElements.define(tagName, GitGist);\nwindow.WebComponents ? window.WebComponents.waitFor(register) : register();"]}